/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v2.6b - Pass 4
   by Sp00kyFox, 2014

   Blends pixels based on detected dithering patterns.

*/

// (De)activate handling of the following patterns.
//#define VL	// vertical line
#define CB	// checkerboard


#define TEX(dx,dy)   tex2D(IN.texture,   texCoord+float2((dx),(dy))*t1)
#define TEXt0(dx,dy) tex2D(ORIG.texture, texCoord+float2((dx),(dy))*t1).xyz

bool eq(float3 A, float3 B){
	return all(A == B);
}

float and(float a, float b){
	return min(a,b);
}

float and(float a, float b, float c){
	return min(a, min(b,c));
}

float or(float a, float b){
	return max(a,b);
}

float or(float a, float b, float c){
	return max(a, max(b,c));
}

float or(float a, float b, float c, float d){
	return max(a, max(b, max(c,d)));
}

float or(float a, float b, float c, float d, float e, float f, float g, float h, float i){
	return max(a, max(b, max(c, max(d, max(e, max(f, max(g, max(h,i))))))));
}

float2 and(float2 a, float2 b){
	return min(a,b);
}

float2 or(float2 a, float2 b){
	return max(a,b);
}

float2 or(float2 a, float2 b, float2 c, float2 d){
	return max(a, max(b, max(c,d)));
}

struct previous
{
	uniform sampler2D texture;
	float2 tex_coord;
};

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
	sampler2D texture : TEXUNIT0;
};

struct tex_coords
{
	float2 tex;
	float2 org;
};

/*    VERTEX_SHADER    */
void main_vertex
(
	float2 tex : TEXCOORD,	
	float4 position : POSITION,
	uniform float4x4 modelViewProj,

	previous ORIG,

	out float4 oPosition : POSITION,
	out tex_coords coords
)
{
	oPosition = mul(modelViewProj, position);

	coords = tex_coords(tex, ORIG.tex_coord);
}

/*    FRAGMENT SHADER    */
float3 main_fragment(in float2 texCoord : TEXCOORD0, uniform input IN, previous ORIG) : COLOR
{

        float2 t1 = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y); // F H

	/*
		UL U1 UR
		L1 C  R1
		DL D1 DR	
	*/

	float4 C  = TEX( 0, 0);	float3 c = TEXt0( 0, 0);
	float2 L  = TEX(-1, 0);	float3 l = TEXt0(-1, 0);
	float2 R  = TEX( 1, 0);	float3 r = TEXt0( 1, 0);
	float2 U  = TEX( 0,-1);
	float2 D  = TEX( 0, 1);

	float  bVL = 0.0,		bCB = 0.0;
	float3 fVL = float3(0.0),	fCB = float3(0.0);

	C.xy = or(C.xy, and(C.zw, or(L.xy, R.xy, U.xy, D.xy)));

#ifdef VL
	fVL = (2.0*c + L.x * l + R.x * r)/(2.0 + L.x + R.x);
	bVL = C.x;
#endif


#ifdef CB	
				float3 u  = TEXt0( 0,-1);
				float3 d  = TEXt0( 0, 1);
	float2 UL = TEX(-1,-1);	float3 ul = TEXt0(-1,-1);
	float2 UR = TEX( 1,-1);	float3 ur = TEXt0( 1,-1);
	float2 DL = TEX(-1, 1);	float3 dl = TEXt0(-1, 1);
	float2 DR = TEX( 1, 1);	float3 dr = TEXt0( 1, 1);

	bool eqCxL  = eq(c,l);
	bool eqCxR  = eq(c,r);
	bool eqCxU  = eq(c,u);
	bool eqCxD  = eq(c,d);
	bool eqCxUL = eq(c,ul);
	bool eqCxUR = eq(c,ur);
	bool eqCxDL = eq(c,dl);
	bool eqCxDR = eq(c,dr);
	
	bool eqUxD  = eq(u,d);
	bool eqLxR  = eq(l,r);

	//----------------------------------------------------------------------------------------------------------------

	//standard formula: C/4 + (UL + UR + DR + DL)/16 + (L + R + D + U)/8

	float bUL = or(UL.y, eqCxUL, and(D.y, eq(ul,d)), and(R.y, eq(ul,r)));
	float bUR = or(UR.y, eqCxUR, and(D.y, eq(ur,d)), and(L.y, eq(ur,l)));
	float bDL = or(DL.y, eqCxDL, and(U.y, eq(dl,u)), and(R.y, eq(dl,r)));
	float bDR = or(DR.y, eqCxDR, and(U.y, eq(dr,u)), and(L.y, eq(dr,l)));

	float bU = or(U.y, eqCxU, and(D.y, eqUxD));
	float bD = or(D.y, eqCxD, and(U.y, eqUxD));
	float bL = or(L.y, eqCxL, and(R.y, eqLxR));
	float bR = or(R.y, eqCxR, and(L.y, eqLxR));

	float3 B = bUL * ul + bUR * ur + bDL * dl + bDR * dr;
	float3 W = bU  * u  + bD  * d  + bL  * l  + bR  * r;
	
	float cntB = bUL + bUR + bDL + bDR;
	float cntW = bU  + bD  + bL  + bR;	

	fCB = (4.0*c + B + 2.0*W)/(4.0 + cntB + 2.0*cntW);

	//----------------------------------------------------------------------------------------------------------------	

	bCB = or(C.y, and(L.y, eqCxL), and(R.y, eqCxR), and(U.y, eqCxU), and(D.y, eqCxD), and(UL.y, eqCxUL), and(UR.y, eqCxUR), and(DL.y, eqCxDL), and(DR.y, eqCxDR));
#endif

	return (bCB >= bVL) ? lerp(c, fCB, bCB) : lerp(c, fVL, bVL);
}
