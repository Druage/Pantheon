/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v1.5 - Pass 2
   by Sp00kyFox, 2013

   Terminates isolated detections.

*/

#define round(X) floor((X)+0.5)

// Radius of the area where the algorithm looks for other detected pixels.
const static int rad = 2;

// Minimal count of detection pixels in search area to be rated as valid.
const static int min = 3;


float remapTo01(float v, float low, float high)
{
	return saturate((v - low)/(high-low));
}

float remapFrom01(float v, float low, float high)
{
    return round(lerp(low, high, v));
}



struct input
{
	float2 video_size;
      float2 texture_size;
      float2 output_size;
};

struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float2 loc : TEXCOORD2;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1.xy = float2( dx,  0); // F
	OUT.t1.zw = float2(  0, dy); // H
	OUT.loc = texCoord*IN.texture_size;

	return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	float2 pos = VAR.loc;	// pos = pixel position
	float2 dir = sign(pos); // dir = pixel direction

	float2 g1 = dir*VAR.t1.xy;
	float2 g2 = dir*VAR.t1.zw;
	
	float4 CC   = tex2D(decal, VAR.texCoord).xyzw;
	
	float C = remapFrom01(CC.w, 0, 15) - 2;

	if(C == 0)
		return CC;
	
	/*
	tag values:
		0	nothing	
		
			checkerboard pattern
		9	DL
		8	DR
		7	UR
		6	UL
		5	full
		
			horizontal two-line checkerboard
		4	bottom line
		3	upper line

			vertical two-line checkerboard
		2	left line
		1	right line

			one line dither
		-1	horizontal
		-2	vertical
	*/

	int hits = 0;

	if(C > 0)
	{
//		for(int x=-rad; x<=rad; x++)
//		{
//			for(int y=-rad; y<=rad; y++)
//			{
//				hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (x*g1) + (y*g2)).x, 0, 15) - 2) > 0) ? 1 : 0;
//			}	
//		}
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + (-2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + (-1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + ( 0*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + ( 1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + ( 2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + (-2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + (-1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + ( 0*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + ( 1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + ( 2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + (-2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + (-1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + ( 0*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + ( 1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + ( 2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + (-2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + (-1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + ( 0*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + ( 1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + ( 2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + (-2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + (-1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + ( 0*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + ( 1*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + ( 2*g2)).w, 0, 15) - 2) > 0) ? 1 : 0;
	}
	else
	{
//		for(int x=-rad; x<=rad; x++)
//		{
//			for(int y=-rad; y<=rad; y++)
//			{
//				hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (x*g1) + (y*g2)).x, 0, 15) - 2) == C) ? 1 : 0;
//			}	
//		}
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + (-2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + (-1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + ( 0*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + ( 1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-2*g1) + ( 2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + (-2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + (-1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + ( 0*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + ( 1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + (-1*g1) + ( 2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + (-2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + (-1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + ( 0*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + ( 1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 0*g1) + ( 2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + (-2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + (-1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + ( 0*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + ( 1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 1*g1) + ( 2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + (-2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + (-1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + ( 0*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + ( 1*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
			hits += ((remapFrom01(tex2D(decal, VAR.texCoord + ( 2*g1) + ( 2*g2)).w, 0, 15) - 2) == C) ? 1 : 0;
		return CC;
	}
	
	if(hits < min)
		return float4(CC.xyz, remapTo01(2, 0, 15));
	else
		return CC;
}
