/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v1.2 - Pass 1
   by Sp00kyFox, 2013

   Tags the pixels which are detected as dither in the alpha channel.

*/

/* Range: [0,3].
Set lower to avoid false detections,
higher to detect more pseudo transparencies. */
const static float thresh = 1.0;

bool eq(float3 A, float3 B)
{
	return (A.x == B.x && A.y == B.y && A.z == B.z);
}

bool tol(float3 A, float3 B)
{
	float3 df = A-B;
	return (dot(df,df) <= thresh);	
}


struct input
{
	float2 video_size;
      float2 texture_size;
      float2 output_size;
};

struct out_vertex {
	half4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	half4 t1 : TEXCOORD1;
	half2 loc : TEXCOORD2;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	half4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform half4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	half2 ps = half2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	half dx = ps.x;
	half dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1.xy = half2( dx,  0); // F
	OUT.t1.zw = half2(  0, dy); // H
	OUT.loc = texCoord*IN.texture_size;

	return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	float2 pos = VAR.loc; // pos = pixel position
	float2 dir = sign(pos); // dir = pixel direction

	float2 g1 = dir*VAR.t1.xy;
	//float2 g2 = dir*VAR.t1.zw;

	float3 C = tex2D(decal, VAR.texCoord).xyz;
	float3 L1 = tex2D(decal, VAR.texCoord - g1).xyz;
	float3 L2 = tex2D(decal, VAR.texCoord - (2*g1)).xyz;
	float3 R1 = tex2D(decal, VAR.texCoord + g1).xyz;
	float3 R2 = tex2D(decal, VAR.texCoord + (2*g1)).xyz;

	float tag = 0.0;
	
	if (!eq(L1,C) || !eq(C,R1))
	{
		if (eq(L2,C) && eq(C,R2) && tol(L1,R1))
		{
			tag = 1.0;	
		}
	}

	return float4(C, tag);
}
