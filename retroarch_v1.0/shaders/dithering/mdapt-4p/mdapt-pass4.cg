/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v1.5 - Pass 4
   by Sp00kyFox, 2013

   Blends tagged pixels with tagged neighbors.

*/

#define round(X) floor((X)+0.5)

bool eq(float4 A, float4 B)
{
	return (A.x == B.x && A.y == B.y && A.z == B.z);
}

float remapFrom01(float v, float low, float high)
{
    return round(lerp(low, high, v));
}


float3 merge3(float4 C, float4 A, float4 B, float tag)
{
	if(A.w == tag)
	{
		if(B.w == tag)
			return 0.5*C.xyz + 0.25*(A.xyz + B.xyz);
		else
			return 0.5*(C.xyz + A.xyz);
	}
	else if(B.w == tag)
		return 0.5*(C.xyz + B.xyz);
	else
		return C.xyz;	
}

float3 merge9(float4 C, float4 UL, float4 UR, float4 DL, float4 DR, float4 U1, float4 D1, float4 L1, float4 R1)
{
	//return 0.25*C.xyz + 0.0625*(UL.xyz + UR.xyz + DR.xyz + DL.xyz) + 0.125*(L1.xyz + R1.xyz + D1.xyz + U1.xyz);
	
	float3 B = (0,0,0);
	float3 W = (0,0,0);
	float cntB = 0;
	float cntW = 0;	

	if(UL.w > 0 || eq(UL,C) || (D1.w > 0 && eq(UL,D1)) || (R1.w > 0 && eq(UL,R1)) )
	{
		B = B+UL.xyz;
		cntB++;
	}
	if(UR.w > 0 || eq(UR,C) || (D1.w > 0 && eq(UR,D1)) || (L1.w > 0 && eq(UR,L1)) )
	{
		B = B+UR.xyz;
		cntB++;
	}
	if(DL.w > 0 || eq(DL,C) || (U1.w > 0 && eq(DL,U1)) || (R1.w > 0 && eq(DL,R1)) )
	{
		B = B+DL.xyz;
		cntB++;
	}
	if(DR.w > 0 || eq(DR,C) || (U1.w > 0 && eq(DR,U1)) || (L1.w > 0 && eq(DR,L1)) )
	{
		B = B+DR.xyz;
		cntB++;
	}
	if(U1.w > 0 || eq(U1,C) || (D1.w > 0 && eq(U1,D1)) )
	{
		W = W+U1.xyz;
		cntW++;
	}
	if(D1.w > 0 || eq(D1,C) || (U1.w > 0 && eq(D1,U1)) )
	{
		W = W+D1.xyz;
		cntW++;
	}
	if(L1.w > 0 || eq(L1,C) || (R1.w > 0 && eq(L1,R1)) )
	{
		W = W+L1.xyz;
		cntW++;
	}
	if(R1.w > 0 || eq(R1,C) || (L1.w > 0 && eq(R1,L1)) )
	{
		W = W+R1.xyz;
		cntW++;
	}
		
	if(cntB == 0)
	{
		if(cntW == 0)
			return C.xyz;
		else
			return 0.5*C.xyz + (1/(cntW*2))*W;
	}
	if(cntW == 0)
		return 0.5*C.xyz + (1/(cntB*2))*B;
	else
		return 0.25*C.xyz + (1/(cntB*4))*B + (1/(cntW*2))*W;	
}



struct input
{
	float2 video_size;
      float2 texture_size;
      float2 output_size;
};

struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float2 loc : TEXCOORD2;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1.xy = float2( dx,  0); // F
	OUT.t1.zw = float2(  0, dy); // H
	OUT.loc = texCoord*IN.texture_size;

	return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	float2 pos = VAR.loc; // pos = pixel position
	float2 dir = sign(pos); // dir = pixel direction

	float2 g1 = dir*VAR.t1.xy;
	float2 g2 = dir*VAR.t1.zw;
	
	/*
		UL U1 UR
		L1 C  R1
		DL D1 DR	
	*/

	float4 C   = tex2D(decal, VAR.texCoord).xyzw;
	float4 L1  = tex2D(decal, VAR.texCoord - g1).xyzw;	
	float4 R1  = tex2D(decal, VAR.texCoord + g1).xyzw;
	float4 U1  = tex2D(decal, VAR.texCoord - g2).xyzw;
	float4 D1  = tex2D(decal, VAR.texCoord + g2).xyzw;
	float4 UL  = tex2D(decal, VAR.texCoord - g1 - g2).xyzw;
	float4 UR  = tex2D(decal, VAR.texCoord + g1 - g2).xyzw;
	float4 DL  = tex2D(decal, VAR.texCoord - g1 + g2).xyzw;
	float4 DR  = tex2D(decal, VAR.texCoord + g1 + g2).xyzw;


	C.w   = remapFrom01(C.w, 0, 15) - 2;
	L1.w  = remapFrom01(L1.w, 0, 15) - 2;	
	R1.w  = remapFrom01(R1.w, 0, 15) - 2;
	U1.w  = remapFrom01(U1.w, 0, 15) - 2;
	D1.w  = remapFrom01(D1.w, 0, 15) - 2;
	UL.w  = remapFrom01(UL.w, 0, 15) - 2;
	UR.w  = remapFrom01(UR.w, 0, 15) - 2;
	DL.w  = remapFrom01(DL.w, 0, 15) - 2;
	DR.w  = remapFrom01(DR.w, 0, 15) - 2;
	
	/*
	tag values:
		0	nothing	
		
			checkerboard pattern
		9	DL
		8	DR
		7	UR
		6	UL
		5	full
		
			horizontal two-line checkerboard
		4	bottom line
		3	upper line

			vertical two-line checkerboard
		2	left line
		1	right line

			one line dither
		-1	horizontal
		-2	vertical
	*/
	

	// checkerboard pattern
	if(C.w > 0)
		return float4(merge9(C,UL,UR,DL,DR,U1,D1,L1,R1),0);
	
	// horizontal one line dither
	if(C.w == -1)
		return float4(merge3(C,L1,R1,-1),0);

	// vertical one line dither
	if(C.w == -2)
		return float4(merge3(C,U1,D1,-2),0);
	
	return float4(C.xyz, 1.0);
}
