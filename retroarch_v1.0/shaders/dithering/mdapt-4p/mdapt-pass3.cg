/*xCOMPATIBILITY 
   - HLSL compilers
   -xCg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v1.5 - Pass 3
   by Sp00kyFox, 2013

   Tags the rest of the detected pattern from pass 1.

*/

#define round(X) floor((X)+0.5)

float remapTo01(float v, float low, float high)
{
	return saturate((v - low)/(high-low));
}

float remapFrom01(float v, float low, float high)
{
    return round(lerp(low, high, v));
}



struct input
{
	float2 video_size;
      float2 texture_size;
      float2 output_size;
};

struct out_vertex {
	float4 position : POSITION;
	float2 texCoord : TEXCOORD0;
	float4 t1 : TEXCOORD1;
	float2 loc : TEXCOORD2;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
	out_vertex OUT;

	OUT.position = mul(modelViewProj, position);

	float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	OUT.texCoord = texCoord;
	OUT.t1.xy = float2( dx,  0); // F
	OUT.t1.zw = float2(  0, dy); // H
	OUT.loc = texCoord*IN.texture_size;

	return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	float2 pos = VAR.loc;	// pos = pixel position
	float2 dir = sign(pos); // dir = pixel direction

	float2 g1 = dir*VAR.t1.xy;
	float2 g2 = dir*VAR.t1.zw;
	
	/*
			U2
		   UL	U1 UR
		L2 L1   xC  R1 R2
    		   DL   D1 DR	
			D2
	*/

	float4 xC = tex2D(decal, VAR.texCoord).xyzw;
	float4 xL1 = tex2D(decal, VAR.texCoord - g1).xyzw;
	float4 xL2 = tex2D(decal, VAR.texCoord - 2*g1).xyzw;
	float4 xR1 = tex2D(decal, VAR.texCoord + g1).xyzw;
	float4 xR2 = tex2D(decal, VAR.texCoord + 2*g1).xyzw;
	float4 xU1 = tex2D(decal, VAR.texCoord - g2).xyzw;
	float4 xU2 = tex2D(decal, VAR.texCoord - 2*g2).xyzw;
	float4 xD1 = tex2D(decal, VAR.texCoord + g2).xyzw;
	float4 xD2 = tex2D(decal, VAR.texCoord + 2*g2).xyzw;
	float4 xUL = tex2D(decal, VAR.texCoord - g1 - g2).xyzw;
	float4 xUR = tex2D(decal, VAR.texCoord + g1 - g2).xyzw;
	float4 xDL = tex2D(decal, VAR.texCoord - g1 + g2).xyzw;
	float4 xDR = tex2D(decal, VAR.texCoord + g1 + g2).xyzw;
	
	float  C = remapFrom01(xC.w, 0, 15) - 2;
	float L1 = remapFrom01(xL1.w, 0, 15) - 2;
	float L2 = remapFrom01(xL2.w, 0, 15) - 2;
	float R1 = remapFrom01(xR1.w, 0, 15) - 2;
	float R2 = remapFrom01(xR2.w, 0, 15) - 2;
	float U1 = remapFrom01(xU1.w, 0, 15) - 2;
	float U2 = remapFrom01(xU2.w, 0, 15) - 2;
	float D1 = remapFrom01(xD1.w, 0, 15) - 2;
	float D2 = remapFrom01(xD2.w, 0, 15) - 2;
	float UL = remapFrom01(xUL.w, 0, 15) - 2;
	float UR = remapFrom01(xUR.w, 0, 15) - 2;
	float DL = remapFrom01(xDL.w, 0, 15) - 2;
	float DR = remapFrom01(xDR.w, 0, 15) - 2;

	/*
	tag values:
		0	nothing	
		
			checkerboard pattern
		9	DL
		8	DR
		7	UR
		6	UL
		5	full
		
			horizontal two-line checkerboard
		4	bottom line
		3	upper line

			vertical two-line checkerboard
		2	left line
		1	right line

			one line dither
		-1	horizontal
		-2	vertical
	*/
	
	// checkerboard pattern
	if(U1 == 5 || D1 == 5 || L1 == 5 || R1 == 5 || UL == 5 || UR == 5 || DR == 5 || DL == 5)
	{
		return float4(xC.xyz, remapTo01(5+2, 0, 15));	
	}
	if(U1 == 6 || L1 == 6 || UL == 6 || UR == 6 || DL == 6) // UL
	{
		return float4(xC.xyz, remapTo01(6+2, 0, 15));	
	}

	if(U1 == 7 || R1 == 7 || UL == 7 || UR == 7 || DR == 7) // UR
	{
		return float4(xC.xyz, remapTo01(7+2, 0, 15));	
	}

	if(D1 == 8 || R1 == 8 || UR == 8 || DR == 8 || DL == 8) // DR
	{
		return float4(xC.xyz, remapTo01(8+2, 0, 15));	
	}

	if(D1 == 9 || L1 == 9 || UL == 9 || DR == 9 || DL == 9) // DL
	{
		return float4(xC.xyz, remapTo01(9+2, 0, 15));	
	}

	// horizontal two-line checkerboard
	if (L2 == 4 || L1 == 4 || R1 == 4 || R2 == 4 || DL == 4 || D1 == 4 || DR == 4)		
	{
		return float4(xC.xyz, remapTo01(4+2, 0, 15));	
	}
	if (L2 == 3 || L1 == 3 || R1 == 3 || R2 == 3 || UL == 3 || U1 == 3 || UR == 3)		
	{
		return float4(xC.xyz, remapTo01(3+2, 0, 15));	
	}
	
	// vertical two-line checkerboard
	if (U2 == 2 || U1 == 2 || D1 == 2 || D2 == 2 || UL == 2 || L1 == 2 || DL == 2)			
	{
		return float4(xC.xyz, remapTo01(2+2, 0, 15));	
	}
	if (U2 == 1 || U1 == 1 || D1 == 1 || D2 == 1 || UR == 1 || R1 == 1 || DR == 1)			
	{
		return float4(xC.xyz, remapTo01(1+2, 0, 15));	
	}
	
	if(C > 0)
		return xC;

	// horizontal one line dither
	if (L2 == -1 || L1 == -1 || R1 == -1 || R2 == -1)
	{
		return float4(xC.xyz, remapTo01(-1+2, 0, 15));	
	}

	// vertical one line dither
	if (U2 == -2 || U1 == -2 || D1 == -2 || D2 == -2)
	{
		return float4(xC.xyz, remapTo01(-2+2, 0, 15));	
	}

	return xC;
}
