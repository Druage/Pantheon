/*xCOMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v2.6a - Pass 3
   by Sp00kyFox, 2013

   Refines the remaining pattern from pass 1 and 2.

*/

#define TEX(dx,dy)   tex2D(IN.texture,   texCoord+float2((dx),(dy))*t1).xy
#define TEXt0(dx,dy) tex2D(ORIG.texture, texCoord+float2((dx),(dy))*t1).xyz

bool eq(float3 A, float3 B){
	return all(A == B);
}

float and(float a, float b){
	return min(a,b);
}

float or(float a, float b, float c, float d, float e){
	return max(a, max(b, max(c, max(d,e))));
}

float or(float a, float b, float c, float d, float e, float f, float g, float h, float i){
	return max(a, max(b, max(c, max(d, max(e, max(f, max(g, max(h,i))))))));
}

struct previous
{
	uniform sampler2D texture;
	float2 tex_coord;
};

struct input
{
	float2 video_size;
	float2 texture_size;  
	float2 output_size;
	sampler2D texture : TEXUNIT0;
};

struct tex_coords
{
	float2 tex;
	float2 org;
};

/*    VERTEX_SHADER    */
void main_vertex
(
	float2 tex : TEXCOORD,	
	float4 position : POSITION,
	uniform float4x4 modelViewProj,

	previous ORIG,

	out float4 oPosition : POSITION,
	out tex_coords coords
)
{
	oPosition = mul(modelViewProj, position);

	coords = tex_coords(tex, ORIG.tex_coord);
}

/*    FRAGMENT SHADER    */
float2 main_fragment(in float2 texCoord : TEXCOORD0, uniform input IN, previous ORIG) : COLOR
{

        float2 t1 = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y); // F H

	float2 C  = TEX( 0, 0);	float3 c  = TEXt0( 0, 0);
	float2 L1 = TEX(-1, 0);	float3 l1 = TEXt0(-1, 0);
	float2 L2 = TEX(-2, 0);	float3 l2 = TEXt0(-2, 0);
	float2 R1 = TEX( 1, 0);	float3 r1 = TEXt0( 1, 0);
	float2 R2 = TEX( 2, 0);	float3 r2 = TEXt0( 2, 0);
	float2 U1 = TEX( 0,-1);	float3 u1 = TEXt0( 0,-1);
	float2 D1 = TEX( 0, 1);	float3 d1 = TEXt0( 0, 1);
	float2 UL = TEX(-1,-1);	float3 ul = TEXt0(-1,-1);
	float2 UR = TEX( 1,-1);	float3 ur = TEXt0( 1,-1);
	float2 DL = TEX(-1, 1);	float3 dl = TEXt0(-1, 1);
	float2 DR = TEX( 1, 1);	float3 dr = TEXt0( 1, 1);

	C.x = or(C.x, L1.x, R1.x, and(L2.x, eq(c,l2)), and(R2.x, eq(c,r2)));
	C.y = or(C.y, and(U1.y, eq(c,u1)), and(D1.y, eq(c,d1)), and(L1.y, eq(c,l1)), and(R1.y, eq(c,r1)), and(UL.y, eq(c,ul)), and(UR.y, eq(c,ur)), and(DL.y, eq(c,dl)), and(DR.y, eq(c,dr)));

	return C;
}
