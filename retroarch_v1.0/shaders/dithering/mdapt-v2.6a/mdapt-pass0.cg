/* COMPATIBILITY 
   - HLSL compilers
   - Cg   compilers
*/

/*
   Merge Dithering and Pseudo Transparency Shader v2.6a - Pass 0
   by Sp00kyFox, 2013

   Neighbor anaylsis via dot product of the difference vectors.

*/

// Uncomment the following line to activate strict pattern behavior (only allows 2 different colors).
//#define strict


#define TEX(dx,dy) tex2D(decal, VAR.texCoord+float2((dx),(dy))*VAR.t1).xyz

float dist(float3 A, float3 B)
{
	float3 diff = A-B;
	float  ravg = (A.x + B.x) * 0.5;

	diff *= diff * float3(2.0 + ravg, 4.0, 3.0 - ravg);
	return sqrt(diff.x + diff.y + diff.z);
}

float eq(float3 A, float3 B){
	return smoothstep(3.0, 0.0, dist(A,B));
}

float and(float a, float b, float c, float d, float e, float f){
	return min(a, min(b, min(c, min(d, min(e,f)))));
}

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
};

struct out_vertex {
        float4 position : POSITION;
        float2 texCoord : TEXCOORD0;
        float2 t1;
};


/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	float4 position	: POSITION,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	uniform input IN
)
{
        out_vertex OUT;

        OUT.position = mul(modelViewProj, position);

        float2 ps = float2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
        float dx  = ps.x;
        float dy  = ps.y;

        OUT.texCoord = texCoord;
        OUT.t1       = float2(dx, dy); // F H

        return OUT;
}

/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex VAR, uniform sampler2D decal : TEXUNIT0, uniform input IN) : COLOR
{
	/*
		  U
		L C R
		  D	
	*/


	float3 C = TEX( 0, 0);
	float3 L = TEX(-1, 0);
	float3 R = TEX( 1, 0);
	float3 U = TEX( 0,-1);
	float3 D = TEX( 0, 1);

#ifdef strict

	bool r = all(L == R) && any(C != L);
	bool g = all(U == D) && any(C != U);
	bool b = r && g && all(L == U);

	return float4(r, g, b, 1.0);

#else

	float3 CsL = normalize(C-L), CsR = normalize(C-R), CsD = normalize(C-D), CsU = normalize(C-U);

	float r = dot(CsL, CsR) * eq(L,R);
	float g = dot(CsU, CsD) * eq(U,D);
	float b = and(r, g, dot(CsL, CsU) * eq(L,U), dot(CsL, CsD) * eq(L,D), dot(CsR, CsU) * eq(R,U), dot(CsR, CsD) * eq(R,D));

	return float4(r, g, b, 0.0);

#endif

}
